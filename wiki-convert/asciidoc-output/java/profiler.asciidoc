// 
//     Licensed to the Apache Software Foundation (ASF) under one
//     or more contributor license agreements.  See the NOTICE file
//     distributed with this work for additional information
//     regarding copyright ownership.  The ASF licenses this file
//     to you under the Apache License, Version 2.0 (the
//     "License"); you may not use this file except in compliance
//     with the License.  You may obtain a copy of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
//     Unless required by applicable law or agreed to in writing,
//     software distributed under the License is distributed on an
//     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//     KIND, either express or implied.  See the License for the
//     specific language governing permissions and limitations
//     under the License.
//

= profiler
:jbake-type: page
:jbake-tags: oldsite, needsreview
:jbake-status: published
:keywords: Apache NetBeans  profiler
:description: Apache NetBeans  profiler
:toc: left
:toc-title:

== Profiler

link:../../images_www/v7/1/screenshots/profiler.png[image:profiler-cut.png[][font-11]#Click image for fullscreen preview#]

*The NetBeans profiler provides expert assistance for optimizing your application's speed and memory usage, and makes it easier to build reliable and scalable Java SE, JavaFX and Java EE applications.*

=== Task-Based Profiling

Select from several common profiling tasks, such as standard CPU or memory profiling, or simple monitoring. The options have been preset to default values by experts; you can customize settings for a specific application.

You precisely control the amount of overhead the profiler imposes, and therefore analyze the application while it runs at almost full speed. You can store analysis data for offline processing: Save and export snapshots of collected results as CSV, HTML, or XML files.

|===
|=== Heap Walker

Use the Heap Walker to evaluate the Java heap contents and to identify unnecessary references that cause memory leaks. You can browse classes and instances of classes on the heap, fields of each instance or class, and references to each instance. Use jHat compatible OQL queries to analyze the contents of a heapdump: Benefit from basic syntax highlighting and code completion for OQL.

 |image:profiler-heapwalker_p150.png[] 

|=== Profiling Points

Place profiling points in your source code to more precisely control the collection of profiling results, similar to debugger breakpoints.

You use profiling points to automatically trigger actions when certain conditions are met, such as execution of a line of code, time elapsed, or memory used. Profiling points can trigger heap dumps, the reseting of results collected, the running of a load generator script, and the taking of a results snapshot.

 |image:javaSE_profiler_profiling_points2_150px.png[] 

|=== Identifying CPU Bottlenecks

The NetBeans profiler can be set up to report only on particular methods or the entire application. A graph categorizes where CPU time has been spent. Click on the graph sections to drill down from high-level categories to more detailed profiling information.

Profile an entire application, or a subset, under a realistic workload. You can do load testing by starting JMeter scripts at the beginning of a profiling session.

=== Tracking Memory Usage

Pinpoint leaking objects based on their special pattern of allocations and garbage collections, or lack thereof. Object liveness profiling tracks both object creation and garbage collection events. Watch the number, age, allocation paths, and other characteristics of objects currently in memory and compare memory snapshots.

 |image:javaSE_profiler_drilldown_150px.png[] 

|=== Monitoring Threads Status

On the Threads Timeline, the NetBeans profiler displays the current and past status of all threads in an application. Thread Details give you detailed information about one or more selected threads, including a list of all state changes in the thread life.

=== Remote Profiling

Profile an application that is running on a different system than your NetBeans IDE. The profiler's remote pack can be installed on a remote system, allowing you to profile an application that is started on that system.

=== Attach Profiler

Attach the profiler to any Java application, even applications that are not started by the IDE. If the Java application and the IDE are both run with JDK 6, you can even attach the profiler dynamically, allowing you to do profiling of an application that is already running.

 |image:profiler-threads.png[] 
|===

 

image:arrow-button.gif[] link:../../kb/trails/java-se.html[Java SE And Base IDE Learning Trail]


NOTE: This document was automatically converted to the AsciiDoc format on 2018-03-08, and needs to be reviewed.
