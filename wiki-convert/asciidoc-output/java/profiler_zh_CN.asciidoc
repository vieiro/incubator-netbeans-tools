// 
//     Licensed to the Apache Software Foundation (ASF) under one
//     or more contributor license agreements.  See the NOTICE file
//     distributed with this work for additional information
//     regarding copyright ownership.  The ASF licenses this file
//     to you under the Apache License, Version 2.0 (the
//     "License"); you may not use this file except in compliance
//     with the License.  You may obtain a copy of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
//     Unless required by applicable law or agreed to in writing,
//     software distributed under the License is distributed on an
//     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//     KIND, either express or implied.  See the License for the
//     specific language governing permissions and limitations
//     under the License.
//

= profiler_zh_CN
:jbake-type: page
:jbake-tags: oldsite, needsreview
:jbake-status: published
:keywords: Apache NetBeans  profiler_zh_CN
:description: Apache NetBeans  profiler_zh_CN
:toc: left
:toc-title:

== 分析器

link:../../images_www/v7/1/screenshots/profiler.png[image:../../images_www/v7/1/screenshots/profiler-cut.png[][font-11]#单击图像查看全屏预览#]

*Netbeans 分析器为优化应用程序的运行速度和内存使用提供了专家级的帮助，从而便于您构建可靠且可伸缩的 Java SE、JavaFX 和 Java EE 应用程序。*

=== 基于任务的性能分析

选取几个常见的性能分析任务，例如标准 CPU 或内存性能分析，或者简单的监控。专家已将这些选项预设为默认值，您可以针对特定的应用程序定制设置。

您可以精确控制分析器产生的系统开销，因此可以对正在全速运行的应用程序进行分析。此外，还可以存储分析数据，以便进行脱机处理：将收集结果的快照另存为 CSV、HTML 或 XML 文件，然后将其导出。

|===
|=== 堆查看器

使用堆查看器评估 Java 堆内容和识别导致内存泄漏的多余引用。可以浏览堆栈上的类和实例、每个实例或类的字段以及每个实例的引用。可以使用与 jHat 兼容的 OQL 查询分析堆转储的内容：利用 OQL 的基本语法突出显示和代码完成功能。

 |image:../../images_www/v6/features/profiler-heapwalker_p150.png[] 

|=== 性能分析点

在源代码中设置性能分析点可以更精确地控制性能分析结果，与调试器断点类似。

当满足一定条件时，性能分析点可以自动触发行为，如执行一行代码、占用的时间和使用的内存。性能分析点能触发堆转储、重置收集的结果、运行加载的生成器脚本以及生成结果快照。

 |image:../../images_www/screenshots/6.0/javaSE_profiler_profiling_points2_150px.png[] 

|=== 识别 CPU 瓶颈

可以对 Netbeans 分析器进行设置，使其提供的报告只针对个别方法或针对整个应用程序。有一个图形显示 CPU 时间耗费在了哪里。单击图形各部分，可以了解上层信息以及更详细的性能分析信息。

根据实际工作量分析整个应用程序或子集。可以在性能分析会话开始阶段启动 JMeter 脚本进行加载测试。

=== 追踪内存使用情况

根据对象的具体分配和垃圾回收模式，明确泄漏对象或者缺乏的对象。对象实时性能分析追踪对象创建和垃圾回收事件。监视当前内存中对象的编号、年龄、分配路径以及其他特征，并比较内存快照。

 |image:../../images_www/screenshots/6.0/javaSE_profiler_drilldown_150px.png[] 

|=== 监控线程状态

在 "Threads Timeline"（线程（时间线））上，Netbeans 分析器显示应用程序中所有线程当前和过去的状态。"Thread Details"（线程（详细信息））提供一个或多个选定线程的详细信息，包括一个涵盖线程生命中全部状态更改的列表。

=== 远程性能分析

分析运行在与运行 NetBeans IDE 的系统不同的系统上的应用程序。分析器远程包可以安装在一个远程系统上，允许您分析在该远程系统上启动的应用程序。

=== 连接分析器

将分析器连接到任何 Java 应用程序上，包括那些不是由 IDE 启动的应用程序。如果 Java 应用程序和 IDE 都和 JDK 6 一起运行，甚至可以实现动态地连接分析器，允许您对已运行的应用程序进行性能分析。

 |image:../../images_www/v6/features/profiler-threads.png[] 
|===

 

image:../../images_www/v6/arrow-button.gif[] link:../../kb/trails/java-se.html[Java SE 和基本 IDE 学习资源]


NOTE: This document was automatically converted to the AsciiDoc format on 2018-03-07, and needs to be reviewed.
